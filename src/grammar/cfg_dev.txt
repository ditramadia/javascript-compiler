-- BASE -----------------------------------

IF -> if
ELSE -> else
FOR -> for
WHILE -> while
IN -> in
SWITCH -> switch
CASE -> case
BREAK -> break
DEFAULT -> default
CONTINUE -> continue
FUNCTION -> function
RETURN -> return
DELETE -> delete
FROM -> from
IMPORT -> import
AS -> as
TRY -> try
CATCH -> catch
THROW -> throw
FINALLY -> finally
ARROW -> arrow
EQUAL -> equal
ISEQ -> iseq
SISEQ -> siseq
NEQ -> neq
SNEQ -> sneq
L -> l
G -> g
LE -> le
GE -> ge
COLON -> colon
SEMICOLON -> semicolon
INCREMENT -> increment
DECREMENT -> decrement
SUMEQ -> sumeq
SUBTREQ -> subtreq
MULEQ -> muleq
DIVEQ -> diveq
ADD -> add
SUBTR -> subtr
MUL -> mul
DIV -> div
MOD -> mod
COMMA -> comma
DOT -> dot
DOTBETWEEN -> dotbetween
AND -> and
OR -> or
NOT -> not
TRUE -> true
FALSE -> false
LB -> lb
RB -> rb
LSB -> lsb
RSB -> rsb
LCB -> lcb
RCB -> rcb
INT -> int
STRING -> string
NULL -> null
UNDEFINED -> undefined
TYPE -> type
VAR -> var

-- S --------------------------------------

S -> IMPORT_STATEMENT SS
S -> IMPORT_STATEMENT S
S -> IMPORT_STATEMENT
S -> SS
SS -> PART SS
SS -> PART S
SS -> PART

PART -> ASSIGN_STATEMENT SEMICOLON
PART -> DELETE_SENTENCE SEMICOLON
PART -> IF_STATEMENT
PART -> SWITCH_STATEMENT
PART -> FUNCTION_STATEMENT
PART -> FUNCTION_SENTENCE SEMICOLON
PART -> METHOD_SENTENCE SEMICOLON
PART -> FOR_STATEMENT
PART -> WHILE_STATEMENT
PART -> TRY_CATCH_STATEMENT
PART -> RETURN_SENTENCE SEMICOLON

SENTENCE -> ASSIGN_STATEMENT SEMICOLON
SENTENCE -> DELETE_SENTENCE SEMICOLON
SENTENCE -> IF_STATEMENT
SENTENCE -> SWITCH_STATEMENT
SENTENCE -> FUNCTION_STATEMENT
SENTENCE -> FUNCTION_SENTENCE SEMICOLON
SENTENCE -> METHOD_SENTENCE SEMICOLON
SENTENCE -> FOR_STATEMENT
SENTENCE -> WHILE_STATEMENT
SENTENCE -> TRY_CATCH_STATEMENT
SENTENCE -> BREAK SEMICOLON
SENTENCE -> CONTINUE SEMICOLON
SENTENCE -> RETURN_SENTENCE SEMICOLON
SENTENCE -> THROW_SENTENCE SEMICOLON
SENTENCE -> SENTENCE SENTENCE

SINGLE_SENTENCE -> ASSIGN_STATEMENT SEMICOLON
SINGLE_SENTENCE -> DELETE_SENTENCE SEMICOLON
SINGLE_SENTENCE -> IF_STATEMENT
SINGLE_SENTENCE -> SWITCH_STATEMENT
SINGLE_SENTENCE -> FUNCTION_STATEMENT
SINGLE_SENTENCE -> FUNCTION_SENTENCE SEMICOLON
SINGLE_SENTENCE -> METHOD_SENTENCE SEMICOLON
SINGLE_SENTENCE -> FOR_STATEMENT
SINGLE_SENTENCE -> WHILE_STATEMENT
SINGLE_SENTENCE -> TRY_CATCH_STATEMENT
SINGLE_SENTENCE -> BREAK SEMICOLON
SINGLE_SENTENCE -> CONTINUE SEMICOLON
SINGLE_SENTENCE -> RETURN_SENTENCE SEMICOLON
SINGLE_SENTENCE -> THROW_SENTENCE SEMICOLON

RETURN_SENTENCE -> RETURN
RETURN_SENTENCE -> RETURN STATIC
THROW_SENTENCE -> THROW
THROW_SENTENCE -> THROW STATIC

-- IMPORT ---------------------------------

IMPORT_STATEMENT -> IMPORT STRING SEMICOLON
IMPORT_STATEMENT -> IMPORT STRING ENTER SEMICOLON
IMPORT_STATEMENT -> IMPORT VAR FROM STRING SEMICOLON 
IMPORT_STATEMENT -> IMPORT VAR FROM STRING ENTER SEMICOLON 
IMPORT_STATEMENT -> IMPORT MUL AS VAR FROM STRING SEMICOLON
IMPORT_STATEMENT -> IMPORT MUL AS VAR FROM STRING ENTER SEMICOLON
IMPORT_STATEMENT -> IMPORT OBJECT FROM STRING SEMICOLON
IMPORT_STATEMENT -> IMPORT OBJECT FROM STRING ENTER SEMICOLON

-- ASSIGNMENT -----------------------------

ASSIGN_OPERATOR -> EQUAL
ASSIGN_OPERATOR -> SUBTREQ
ASSIGN_OPERATOR -> MULEQ
ASSIGN_OPERATOR -> DIVEQ
ASSIGN_CREMENT -> INCREMENT
ASSIGN_CREMENT -> DECREMENT

ASSIGNMENT -> INT
ASSIGNMENT -> VAR
ASSIGNMENT -> STRING
ASSIGNMENT -> NULL
ASSIGNMENT -> UNDEFINED
ASSIGNMENT -> LIST
ASSIGNMENT -> ARIT_OPERATION
ASSIGNMENT -> LOGIC_OPERATION
ASSIGNMENT -> LOGIC_OPERAND
ASSIGNMENT -> FUNCTION_STATEMENT_EXPR
ASSIGNMENT -> FUNCTION_STATEMENT_ARROW
ASSIGNMENT -> FUNCTION_SENTENCE
ASSIGNMENT -> METHOD_SENTENCE

ASSIGN_STATEMENT -> VAR ASSIGN_OPERATOR ASSIGNMENT 
ASSIGN_STATEMENT -> VAR ASSIGN_CREMENT 
ASSIGN_STATEMENT -> TYPE VAR ASSIGN_OPERATOR ASSIGNMENT 
ASSIGN_STATEMENT -> TYPE VAR ASSIGN_CREMENT 

DELETE_SENTENCE -> DELETE VAR

-- ARITMETHIC OPERATION -----------------------

ARIT_OPERATOR -> ADD
ARIT_OPERATOR -> SUBTR
ARIT_OPERATOR -> MUL
ARIT_OPERATOR -> DIV
ARIT_OPERATOR -> MOD

ARIT_OPERAND -> LB ARIT_OPERAND RB
ARIT_OPERAND -> INT
ARIT_OPERAND -> VAR
ARIT_OPERAND -> ARIT_OPERATION

ARIT_OPERATION -> ARIT_OPERAND ARIT_OPERATOR ARIT_OPERAND
ARIT_OPERATION -> LB ARIT_OPERATION RB

-- LOGICAL OPERATION -----------------------

LOGIC_OPERATOR -> AND
LOGIC_OPERATOR -> OR
LOGIC_OPERATOR -> ISEQ
LOGIC_OPERATOR -> NEQ
LOGIC_OPERATOR -> LE
LOGIC_OPERATOR -> GE
LOGIC_OPERATOR -> L
LOGIC_OPERATOR -> G

LOGIC_OPERAND -> VAR
LOGIC_OPERAND -> BOOLEAN
LOGIC_OPERAND -> INT
LOGIC_OPERAND -> STRING
LOGIC_OPERAND -> NULL
LOGIC_OPERAND -> LOGIC_OPERATION
LOGIC_OPERAND -> ARIT_OPERATION
LOGIC_OPERAND -> FUNCTION_SENTENCE
LOGIC_OPERAND -> LB LOGIC_OPERAND RB

LOGIC_OPERATION -> LOGIC_OPERAND LOGIC_OPERATOR LOGIC_OPERAND
LOGIC_OPERATION -> LB LOGIC_OPERATION RB
LOGIC_OPERATION -> VAR IN LIST
LOGIC_OPERATION -> VAR IN STRING

-- CONDITIONAL --------------------------

IF_STATEMENT -> IF LB STATIC RB BLOCK
IF_STATEMENT -> IF LB LOGIC_OPERAND RB BLOCK
IF_STATEMENT -> IF LB LOGIC_OPERATION RB BLOCK

IF_STATEMENT -> IF LB STATIC RB BLOCK ELSE IF_STATEMENT
IF_STATEMENT -> IF LB LOGIC_OPERAND RB BLOCK ELSE IF_STATEMENT
IF_STATEMENT -> IF LB LOGIC_OPERATION RB BLOCK ELSE IF_STATEMENT
IF_STATEMENT -> IF LB STATIC RB ENTER BLOCK ELSE IF_STATEMENT

IF_STATEMENT -> IF LB STATIC RB BLOCK ELSE BLOCK
IF_STATEMENT -> IF LB LOGIC_OPERAND RB BLOCK ELSE BLOCK
IF_STATEMENT -> IF LB LOGIC_OPERATION RB BLOCK ELSE BLOCK

-- SWITCH CASE --------------------------

SWITCH_STATEMENT -> SWITCH LB VAR RB SWITCH_BLOCK

SWITCH_BLOCK -> LCB RCB
SWITCH_BLOCK -> LCB SWITCH_SENTENCE RCB

SWITCH_SENTENCE -> CASE_STATEMENT
SWITCH_SENTENCE -> DEFAULT_STATEMENT
SWITCH_SENTENCE -> SWITCH_SENTENCE SWITCH_SENTENCE

CASE_STATEMENT -> CASE STATIC COLON SENTENCE
CASE_STATEMENT -> DEFAULT COLON SENTENCE

-- FUNCTION -----------------------------

FUNCTION_STATEMENT -> FUNCTION VAR LB RB BLOCK
FUNCTION_STATEMENT -> FUNCTION VAR LB PARAM RB BLOCK

FUNCTION_STATEMENT_EXPR -> FUNCTION LB RB BLOCK
FUNCTION_STATEMENT_EXPR -> FUNCTION LB PARAM RB BLOCK

FUNCTION_STATEMENT_ARROW -> LB RB ARROW BLOCK
FUNCTION_STATEMENT_ARROW -> LB PARAM RB ARROW BLOCK

PARAM -> STATIC 
PARAM -> STATIC COMMA PARAM 

FUNCTION_SENTENCE -> VAR LB RB
FUNCTION_SENTENCE -> VAR LB PARAM RB

-- METHOD -------------------------------

METHOD_SENTENCE -> DOTBETWEEN FUNCTION_SENTENCE
METHOD_SENTENCE -> DOTBETWEEN METHOD_SENTENCE
METHOD_SENTENCE -> METHOD_SENTENCE DOT FUNCTION_SENTENCE

-- FOR LOOP -----------------------------

FOR_STATEMENT -> FOR LB ASSIGN_STATEMENT SEMICOLON LOGIC_OPERATION SEMICOLON ASSIGN_STATEMENT RB BLOCK
FOR_STATEMENT -> FOR LB VAR IN LIST RB BLOCK
FOR_STATEMENT -> FOR LB VAR IN STRING RB BLOCK

-- WHILE LOOP----------------------------

WHILE_STATEMENT -> WHILE LB LOGIC_OPERATION RB BLOCK

-- TRY CATCH ----------------------------

TRY_CATCH_STATEMENT -> TRY BLOCK CATCH LB VAR RB BLOCK
TRY_CATCH_STATEMENT -> TRY BLOCK CATCH LB VAR RB BLOCK FINALLY BLOCK

-- VAR TYPE -----------------------------

STATIC -> INT
STATIC -> VAR
STATIC -> STRING
STATIC -> BOOLEAN
STATIC -> LIST
STATIC -> FUNCTION_STATEMENT_ARROW
STATIC -> ARIT_OPERATION
STATIC -> LOGIC_OPERATION
STATIC -> NONE
STATIC -> LB STATIC RB

BOOLEAN -> TRUE
BOOLEAN -> FALSE

LIST -> LSB STATIC_GROUP RSB
LIST -> LSB STATIC RSB
LIST -> LSB RSB

OBJECT -> LCB VAR RCB
OBJECT -> LCB VAR_GROUP RCB

STATIC_GROUP -> STATIC COMMA STATIC
STATIC_GROUP -> STATIC COMMA STATIC_GROUP

VAR_GROUP -> VAR COMMA VAR
VAR_GROUP -> VAR COMMA VAR_GROUP

BLOCK -> LCB RCB
BLOCK -> LCB SENTENCE RCB
BLOCK -> SINGLE_SENTENCE
